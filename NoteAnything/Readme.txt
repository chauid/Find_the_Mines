프로그램 작성시 유의사항 (필독!)
※클래스 1개당 왠만하면 한 사람이 할당(ex3, ex4 참고)
※자신이 만든 클래스는 Class/[해당 개발자]/[클래스이름].cs 경로에 파일을 저장

규칙1. [폼이름]_partial.cs는 절대(중요!) 수정하지 않는다.
규칙2. [폼이름]_[해당개발자].cs에는 모든 메소드 선언부에 주석을 표시한다.
규칙3. 왠만해서는 다른 개발자의 클래스를 건드리는 일이 없도록 한다.(분업을 효율적으로... / 자꾸 겹치면 ㅈ망함)
주기적으로 merge할 때 [폼이름]_수정[해당개발자].cs는 [폼이름]_partial.cs로 합칠 것임.

단, 폼 클래스를 수정할 때는 merge를 효율적으로 하기 위해 
자신이 수정한 파일에 대해서 무조건 Modification/[해당 개발자]/ 경로에 파일을 저장
->Modification/[해당 개발자]/[내가 수정한 폼이름]_수정[해당개발자].cs
당연히 모든 수정 내용에는 partial class를 적용(디버그는 해야 하니까...)

예시는 네임스페이스, 클래스를 생략함. ex3, ex4는 반드시 필요한 경우에만 적용하자.
----------------------------------------------------------------------
ex1) 메인폼 클래스에 새로운 메소드를 추가하고 싶은 경우(또는 새로운 변수)
->추가한 부분에 대해서만 작성
메인폼_partial.cs
{
    새로운 변수, 메소드 <- 를 여기 작성 안 할 것임(잘못된 예시)
    내가 안 바꾼 기존 내용 <- 얜 그대로 둠
}

Modification/[해당 개발자]/메인폼_수정Jang.cs
메인폼_수정Jang.cs //partial은 붙이지 않음
{
    새로운 변수, 메소드 <- 여기에 작성
}
----------------------------------------------------------------------
ex2) 메인폼 클래스에 기존 내용을 수정하고 싶은 경우(왠만하면 변수이름은 그대로 두자. 변수이름 변경X) // 변수이름은 애초에 잘 짓자! 주석은 필수
->수정할 메소드를 주석처리한다.(안 그럼 중복선언 오류)
->수정할 메소드를 [내가 수정한 폼이름]_수정[해당개발자].cs 파일에 통째로 복사해 온다.
->메소드를 수정하고 반드시 메소드 선언부에 주석 표시
폼A_partial.cs
{
/*  public void methodA(int a) <- 메소드 전체를 주석처리
    {
        int i = a; <- 이 부분을 수정하고 싶다면 메소드 전체를 복사
    }*/
}

Modification/[해당 개발자]/폼A_수정Go.cs
폼A_수정Go.cs //partial은 붙이지 않음
{
    // x 추가 <- 주석 표시(간단하게 작성)
    public void methodA(int a) <- 메소드 전체를 복사해옴
    {
        int i = a;
        int x = i * a; <- 수정한 부분
    }
}
----------------------------------------------------------------------
ex3)다른 개발자의 클래스에 코드를 추가하고 싶은 경우(ex1의 경우와 같다.)
->추가한 부분에 대해서만 작성
Class/Kim/PaintPanelClass.cs
{
    기존 코드
}

Modification/[해당 개발자]/PaintPanelClass_수정Jang.cs
PaintPanelClass_수정Jang.cs //partial은 붙이지 않음
{
    새로운 변수, 메소드 <- 여기에 작성
}
----------------------------------------------------------------------
ex4)다른 개발자의 클래스를 수정하고 싶은 경우(ex2의 경우와 같다.)
Class/Go/ControlButton.cs
{
/*  public void ControlMethod() <- 메소드 전체를 주석처리
    {
        int i = 3; <- 이 부분을 수정하고 싶다면 메소드 전체를 복사
    }*/
}

Modification/[해당 개발자]/ControlButton_수정Go.cs
ControlButton_수정Go.cs //partial은 붙이지 않음
{
    // str 추가 <- 주석 표시(간단하게 작성)
    public void ControlMethod(string str) <- 메소드 전체를 복사해옴
    {
        int i = 3;
        str.add(i.ToString()); <- 수정한 부분
    }
}
->이 경우는 버그 요청사항(Google Keep)에 기재


=======================================================================
여기부터는 최종본의 구조도 예시
프로그램 완성할 시에 이상적인 프로그램 구조도
Form_A.cs // Class디렉토리 내에 파일 생성
Poject_NameSpace
{
    partial FormClass : Form // 폼
    {
        public Main() //메인 함수
        {
            '''
            Main() // 생성자
            {
                '''
            }
        }
    }
}

// A1.cs 외부 사용자1 정의 클래스 파일
Poject_NameSpace // 같은 네임스페이스
class AA // 사용자1 정의 클래스
{
    public void AA_1() //사용자 정의 메소드
    {
        '''
    }
}
class AB // 사용자 정의 클래스
{
    public int AB_1() //사용자 정의 메소드
    {
        '''
    }
}

// B1.cs 외부 사용자2 정의 클래스 파일
Poject_NameSpace // 같은 네임스페이스
class BB // 사용자2 정의 클래스
{
    public int CC_1() //사용자 정의 메소드
    {
        '''
    }
}

같은 디렉토리에 파일 생성
Form_A_partial.cs // 파일 이름 : [폼이름]_partial.cs
partial class FormClass 사용자 정의 메소드
{
    private int panelsize = 10; //예시
    public panelset() // Form클래스 내부 메소드
    {
        '''
    }
    폼 클래스 메소드 선언 및 구현
    
    private EventHandle(이벤트)
    {
        '''
        AA useAA = new AA();
        useAA.AA_1();
    }
}


----------에러날 시 읽을 것----------
[폼이름]_partial.cs는 폼 클래스를 상속받는 후([내 클래스 이름] : Form) 더블클릭 시
[폼이름]_partial.resx 파일이 생성되는데 이 파일은 중복 폼 선언으로 에러 발생
->해결방법 : [폼이름]_partial.resx 삭제
->[폼이름]_partial.cs 소스코드는 열고 싶으면
[폼이름]_partial.cs <- 이걸 말고
 └[폼 클래스 이름]을 <- 더블 클릭